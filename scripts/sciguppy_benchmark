#!/usr/bin/env python

import numpy
import math
import click
import timeit
import scipy.signal
import scipy.special
import sciguppy

x = numpy.random.rand(100,100,5).astype(numpy.float32)
y = numpy.random.rand(4,20,3).astype(numpy.float32)

def correlate_base(a1, a2, mode=sciguppy.CorrelationModes.FULL):
    return scipy.signal.correlate(a1, a2, mode=mode.value)

@click.group()
@click.option('--mode', default=sciguppy.CorrelationModes.FULL, type=click.Choice([sciguppy.CorrelationModes.VALID, sciguppy.CorrelationModes.FULL]))
@click.option('--memcpy/--no-memcpy', default=True)
@click.pass_context
def benchmark(ctx, mode, memcpy):
    ctx.obj['mode'] = mode
    ctx.obj['memcpy'] = memcpy

@benchmark.command()
@click.pass_context
def test(ctx):
    mode = ctx.obj['mode']
    out1 = correlate_base(x, y, mode=mode)
    out2 = sciguppy.correlate(x, y, mode=mode)
    assert numpy.allclose(out1, out2)

    out1 = scipy.special.expit(x)
    out2 = sciguppy.expit(x)
    assert numpy.allclose(out1, out2)

@benchmark.command()
@click.pass_context
def all(ctx):
    mode = ctx.obj['mode']

    correlate_cpu = lambda: correlate_base(x, y, mode=mode)
    if ctx.obj['memcpy']:
        correlate_gpu = lambda: sciguppy.correlate(x, y, mode=mode)
    else:
        d_x = sciguppy.utils.as_gpu(x)
        d_y = sciguppy.utils.as_gpu(y)
        correlate_gpu = lambda: sciguppy.correlate(d_x, d_y, mode=mode, return_type=sciguppy.ArrayReturnTypes.GPU)
    run_benchmark('correlate', correlate_cpu, correlate_gpu)

    expit_cpu = lambda: scipy.special.expit(x)
    if ctx.obj['memcpy']:
        expit_gpu = lambda: sciguppy.expit(x)
    else:
        d_x = sciguppy.utils.as_gpu(x)
        expit_gpu = lambda: sciguppy.expit(d_x, return_type=sciguppy.ArrayReturnTypes.GPU)
    run_benchmark('expit', expit_cpu, expit_gpu)


@benchmark.command()
@click.pass_context
def gpu(ctx):
    sciguppy.correlate(x, y, mode=ctx.obj['mode'])

def run_benchmark(name, cpu_func, gpu_func):
    print name
    baseline = timeit.repeat(cpu_func, repeat=10, number=1)

    gpu_func() # warm the gpu before benchmarking
    window_gpu_baseline = timeit.repeat(gpu_func, repeat=10, number=1)

    print '\tbaseline: avg={}, min={}, max={}'.format(numpy.average(baseline), min(baseline), max(baseline))
    print '\twindow gpu baseline: avg={}, min={}, max={}'.format(numpy.average(window_gpu_baseline), min(window_gpu_baseline), max(window_gpu_baseline))

if __name__ == '__main__':
    benchmark(obj={})
